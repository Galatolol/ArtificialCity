import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.util.Collection;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

public class Frame extends JFrame {
	
	public static final int WIDTH = 900;
	public static final int HEIGHT = 900;
	public static final int RAD = 5;
 
	Frame() {
		
		setResizable(false);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		ContentPanel container = new ContentPanel();
		JScrollPane jsp = new JScrollPane(container, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);		
		//jsp.setPreferredSize(container.getPreferredSize());
		container.initContentPanel();
		jsp.setAutoscrolls(true);
		add(jsp);
		setSize(WIDTH, HEIGHT);
		
	}

	public static void main(String[] args) {
		Frame myFrame = new Frame();
		myFrame.setVisible(true);	
		
	}

}

class ContentPanel extends JPanel {
	private Image bgImage = null;

	public void initContentPanel() {
		MediaTracker mt = new MediaTracker(this);
		bgImage = Toolkit.getDefaultToolkit().getImage("res/map.jpg");
		mt.addImage(bgImage, 0);
		try {
			mt.waitForAll();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		int imWidth = bgImage.getWidth(null);
		int imHeight = bgImage.getHeight(null);
		
		Graph myGraph = new Graph();
	    myGraph.init();
		
	    g.drawImage(bgImage, 0, 0, 1000, 1000, null);
	    g.fillOval(0, 1000, 20*2, 20*2);
		
	    for(int i = 0; i <= 10; i++) {
			g.setColor(Color.RED);
			g.fillOval(i*100-10,0-10,20, 20);
			g.fillOval(0-10,i*100-10,20, 20);
		}
	    
	    
		for(int i = 0; i < myGraph.vertices.size(); i++) {
			g.setColor(Color.RED);
			g.fillOval(myGraph.vertices.get(i).getX() - Frame.RAD, 
					   myGraph.vertices.get(i).getY() - Frame.RAD, 
					   Frame.RAD*2, Frame.RAD*2);
		}
		
		Collection<E> edges = myGraph.graph.getEdges();
		for(E e : edges) {
			g.setColor(Color.BLUE);
			for(int i = 0; i < e.getLanesNum(); i++) {
				for(int j = 0; j < e.cellTab[i].cellList.length; j++) {
					g.fillRect(e.cellTab[i].cellList[j].getX(), e.cellTab[i].cellList[j].getY(), 5, 5);
				}
			}
			
			
			
			g.setColor(Color.GREEN);
			g.drawLine(e.getBeginX(), e.getBeginY(), e.getEndX(), e.getEndY());
		}
		
  }
}