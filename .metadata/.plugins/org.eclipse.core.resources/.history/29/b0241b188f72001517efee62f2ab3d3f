
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.collections15.Transformer;

import edu.uci.ics.jung.algorithms.shortestpath.DijkstraShortestPath;
import edu.uci.ics.jung.graph.DirectedGraph;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.UndirectedGraph;
import edu.uci.ics.jung.graph.UndirectedSparseMultigraph;
import edu.uci.ics.jung.graph.util.EdgeType;

public class Graph {
	public UndirectedGraph<V, E> graph;
	public static LinkedList<V> vertices = new LinkedList<V>();

	
	
	public void init() {
		graph = new UndirectedSparseMultigraph<V, E>();
		
		this.createVertices();
		this.createGraph();
		
		
	}
	
	private void createVertices() {
		vertices.add(new V(0, 10, 1000 , "TEST"));
		vertices.add(new V(1, 10, 1000 , "Aleje Poczatek"));
		vertices.add(new V(2, 20, 900, "Reymonta-Aleje-Czysta"));
		vertices.add(new V(3, 0, 900, "Reymonta-Pocztek"));
		vertices.add(new V(4, 0, 750, "Czarnowiejska-Poczatek"));
		vertices.add(new V(5, 30, 700, "Czarnowiejska-Aleje-Czarnowiejska"));
		vertices.add(new V(6, 100, 900, "Czysta-DolnychMłynów"));
		vertices.add(new V(7, 100, 750, "Czarnowiejska-DolnychMłynów"));
		vertices.add(new V(8, 0, 750, "Aleje-Kochanowskiego"));
		vertices.add(new V(9, 0, 750, "Kochanowskiego-Michałowskiego"));
	}
	
	private void createGraph() {
		 graph.addEdge(new E(vertices.get(1),vertices.get(2), 500), 
				 vertices.get(1), vertices.get(2), EdgeType.UNDIRECTED);
		 
		 graph.addEdge(new E(vertices.get(3),vertices.get(2), 500), 
				 vertices.get(3), vertices.get(2), EdgeType.UNDIRECTED);
		 
		 graph.addEdge(new E(vertices.get(4),vertices.get(5), 500), 
				 vertices.get(4), vertices.get(5), EdgeType.UNDIRECTED);
		 
		 graph.addEdge(new E(vertices.get(2),vertices.get(5), 500), 
				 vertices.get(2), vertices.get(5), EdgeType.UNDIRECTED);
		 
		 graph.addEdge(new E(vertices.get(2),vertices.get(6), 500), 
				 vertices.get(2), vertices.get(6), EdgeType.UNDIRECTED);
		 
		 graph.addEdge(new E(vertices.get(5),vertices.get(7), 500), 
				 vertices.get(5), vertices.get(7), EdgeType.UNDIRECTED);
		 
		 graph.addEdge(new E(vertices.get(7),vertices.get(6), 500), 
				 vertices.get(7), vertices.get(6), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(5),vertices.get(8), 500), 
				 vertices.get(5), vertices.get(8), EdgeType.UNDIRECTED);
		 
		 graph.addEdge(new E(vertices.get(9),vertices.get(8), 500), 
				 vertices.get(9), vertices.get(8), EdgeType.UNDIRECTED);
		 
		 graph.addEdge(new E(vertices.get(9),vertices.get(7), 500), 
				 vertices.get(9), vertices.get(7), EdgeType.UNDIRECTED);
	}
	
	public void calcWeightedShortestPath(V start, V end) {
        Transformer<E, Double> wtTransformer = new Transformer<E,Double>() {
            public Double transform(E edge) {
                return edge.getWeight();
            }
        };
        
        DijkstraShortestPath<V,E> alg = new DijkstraShortestPath(graph, wtTransformer);
        List<E> l = alg.getPath(start, end);
        
        Number dist = alg.getDistance(start, end);
        System.out.println("The shortest weighted path from " + start.toString()  + " to " + end.toString() + " is:");
        System.out.println(l.toString());
        System.out.println("and the length of the path is: " + dist);
    }
	
	public static void main(String[] args) {
        Graph myApp = new Graph();
        myApp.init();
        
        System.out.println(myApp.graph.toString());
        myApp.calcWeightedShortestPath(vertices.get(1), vertices.get(7));
  
    }
}
