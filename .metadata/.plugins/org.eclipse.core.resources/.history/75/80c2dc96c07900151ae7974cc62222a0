
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Paint;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

import javax.swing.JFrame;

import org.apache.commons.collections15.Transformer;

import edu.uci.ics.jung.algorithms.layout.ISOMLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.algorithms.shortestpath.DijkstraShortestPath;
import edu.uci.ics.jung.graph.SparseMultigraph;
import edu.uci.ics.jung.graph.util.EdgeType;
import edu.uci.ics.jung.visualization.BasicVisualizationServer;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.renderers.Renderer.VertexLabel.Position;

public class Graph {
	public SparseMultigraph<V, E> graph;
	public static LinkedList<V> vertices = new LinkedList<V>();
	
	public void init() {
		graph = new SparseMultigraph<V, E>();
		
		this.createVertices();
		this.createGraph();	
	}
	
	private void createVertices() {
		vertices.add(new V(0, 0, 0));
		
		
		vertices.add(new V(1, 55, 965));
		vertices.add(new V(2, 90, 965));
		vertices.add(new V(3, 280, 965));
		vertices.add(new V(4, 450, 1000));
		vertices.add(new V(5, 650, 1000));
		vertices.add(new V(6, 750, 1000));
		vertices.add(new V(7, 1000, 1000));
		vertices.add(new V(8, 1000, 900));
		vertices.add(new V(9, 800, 900));
		vertices.add(new V(10, 650, 900));
		vertices.add(new V(11, 550, 900));
		vertices.add(new V(12, 425, 880));
		vertices.add(new V(13, 390, 905));
		vertices.add(new V(14, 325, 935));
		vertices.add(new V(15, 0, 800));
		vertices.add(new V(16, 80, 825));
		vertices.add(new V(17, 110, 830));
		vertices.add(new V(18, 140, 830));
		vertices.add(new V(19, 315, 820));
		vertices.add(new V(20, 405, 820));
		vertices.add(new V(21, 395, 735));
		vertices.add(new V(22, 530, 730));
		vertices.add(new V(23, 700, 650));
		vertices.add(new V(24, 730, 760));
		vertices.add(new V(25, 900, 800));
		vertices.add(new V(26, 950, 700));
		vertices.add(new V(27, 1000, 730));
		
		vertices.add(new V(42, 360, 625)); //28
		vertices.add(new V(43, 165, 555)); //29
		vertices.add(new V(44, 130, 540)); // 30
		vertices.add(new V(45, 0, 470));   //31
		
	}
	
	private void createGraph() {
		 graph.addEdge(new E(vertices.get(2),vertices.get(17), 50, 50, 3), 
				 vertices.get(2), vertices.get(17), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(17),vertices.get(16), 50, 50 ,1), 
				 vertices.get(17), vertices.get(16), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(16),vertices.get(15), 50, 50, 1), 
				 vertices.get(16), vertices.get(15), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(15),vertices.get(16), 50, 50, 1), 
				 vertices.get(15), vertices.get(16), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(16),vertices.get(17), 50, 50, 1), 
				 vertices.get(16), vertices.get(17), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(16),vertices.get(1), 50, 50, 1), 
				 vertices.get(16), vertices.get(1), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(17),vertices.get(29), 50, 50, 1), 
				 vertices.get(17), vertices.get(29), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(17),vertices.get(29), 50, 50, 3), 
				 vertices.get(17), vertices.get(29), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(29),vertices.get(30), 50, 50, 1), 
				 vertices.get(29), vertices.get(30), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(30),vertices.get(31), 50, 50, 2), 
				 vertices.get(30), vertices.get(31), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(31),vertices.get(30), 50, 50, 1), 
				 vertices.get(31), vertices.get(30), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(30),vertices.get(29), 50, 50, 1), 
				 vertices.get(30), vertices.get(29), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(30),vertices.get(16), 50, 50, 1), 
				 vertices.get(30), vertices.get(16), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(18),vertices.get(19), 50, 50, 1), 
				 vertices.get(18), vertices.get(19), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(19),vertices.get(18), 50, 50, 1), 
				 vertices.get(19), vertices.get(18), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(14),vertices.get(19), 50, 50, 1), 
				 vertices.get(14), vertices.get(19), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(3),vertices.get(14), 50, 50, 1), 
				 vertices.get(3), vertices.get(14), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(14),vertices.get(3), 50, 50, 1), 
				 vertices.get(14), vertices.get(3), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(14),vertices.get(13), 50, 50, 1), 
				 vertices.get(14), vertices.get(13), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(13),vertices.get(14), 50, 50, 1), 
				 vertices.get(13), vertices.get(14), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(4),vertices.get(3), 50, 50, 1), 
				 vertices.get(4), vertices.get(3), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(13),vertices.get(12), 50, 50, 1), 
				 vertices.get(13), vertices.get(12), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(12),vertices.get(13), 50, 50, 1), 
				 vertices.get(12), vertices.get(13), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(20),vertices.get(12), 50, 50, 1), 
				 vertices.get(20), vertices.get(12), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(19),vertices.get(20), 50, 50, 1), 
				 vertices.get(19), vertices.get(20), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(20),vertices.get(19), 50, 50, 1), 
				 vertices.get(20), vertices.get(19), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(21),vertices.get(20), 50, 50, 1), 
				 vertices.get(21), vertices.get(20), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(28),vertices.get(21), 50, 50, 1), 
				 vertices.get(28), vertices.get(21), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(29),vertices.get(28), 50, 50, 1), 
				 vertices.get(29), vertices.get(28), EdgeType.DIRECTED);
		 
		 graph.addEdge(new E(vertices.get(28),vertices.get(29), 50, 50, 1), 
				 vertices.get(29), vertices.get(28), EdgeType.DIRECTED);
	}
	
	public void calcWeightedShortestPath(V start, V end) {
        Transformer<E, Integer> wtTransformer = new Transformer<E,Integer>() {
            public Integer transform(E edge) {
                return edge.getLength();
            }
        };
        
        DijkstraShortestPath<V,E> alg = new DijkstraShortestPath<V, E>(graph, wtTransformer);
        List<E> path = alg.getPath(start, end);
        
        double distance = (double)alg.getDistance(start, end);
        System.out.println("The shortest weighted path from " + start.toString()  + " to " + end.toString() + " is:");
        //System.out.println(path.toString());
        
        for(E e : path) {
        	System.out.println(e.toString());
        	System.out.println(e.cellsToString());
        }
        
        
        System.out.println("and the length of the path is: " + distance);
    }
	
	public static void main(String[] args) {
        Graph myApp = new Graph();
        myApp.init();
        
        //System.out.println(myApp.graph.toString());
        myApp.calcWeightedShortestPath(vertices.get(2), vertices.get(20));
        
        Transformer<V, Paint> edgeStroke = new Transformer<V, Paint>() {
		    public Paint transform(V s) {
		    	
		    	new BasicStroke();
		        return Color.GREEN;
		    }
		};
	
       Transformer<V,Paint> vertexColor = new Transformer<V,Paint>() {
            public Paint transform(V i) {

	    			return Color.ORANGE;
	    		} 
            
        };
	
        Layout<V, E> layout;

        	layout = new ISOMLayout<V, E>(myApp.graph); 
 
        layout.setSize(new Dimension(500, 500)); 
        BasicVisualizationServer<V,E> vv = new BasicVisualizationServer<V,E>(layout);
        vv.setPreferredSize(new Dimension(500, 500)); 
        vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller<V>());
        vv.getRenderContext().setVertexFillPaintTransformer(vertexColor);
        //vv.getRenderContext().setEdgeDrawPaintTransformer(edgeStroke);
        vv.getRenderer().getVertexLabelRenderer().setPosition(Position.CNTR);
        
        JFrame frame = new JFrame("Graf");
    	frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    	frame.getContentPane().add(vv); 
    	frame.pack();
    	frame.setVisible(true);  
    }


private void getVertices(String path) throws FileNotFoundException {
    File file = new File(path);
    Scanner in = new Scanner(file);
            
    String scanLine;
    while(in.hasNextLine()) {
	    scanLine = in.nextLine();
        String[] v = scanLine.split(",");
        vertices.add(new V(Integer.parseInt(v[0]), 
        				   Integer.parseInt(v[1]), 
        				   Integer.parseInt(v[2])));      	    	  
	}
    in.close();
}
}
